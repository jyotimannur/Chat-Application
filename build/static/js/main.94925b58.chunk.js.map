{"version":3,"sources":["components/LoginForm.jsx","components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","className","onSubmit","e","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","type","value","onChange","target","placeholder","required","align","MessageForm","props","setValue","chatId","creds","handleSubmit","event","text","trim","length","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","style","display","fles","files","tpe","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","renderMessages","keys","Object","key","lastMessageKey","width","title","height","App","getItem","userSecret","projectID","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94925b58.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { useState } from 'react';\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n     const [error, setError] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const authObject = { 'Project-ID': \"6b644aa0-ddcf-4c97-8822-845ce8f2de45\", 'User-Name': username, 'User-Secret': password };\r\n        \r\n        try {\r\n            axios.get('https://api.chatengine.io/chats', { headers: authObject });\r\n            \r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('password', password);\r\n\r\n            window.location.reload();\r\n        \r\n        } catch (error) {\r\n            setError('Oops, incorrect credentials.')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">Chat Application</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"username\" required />\r\n                <input type=\"text\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"password\" required />\r\n                <div align=\"center\">\r\n                    <button type=\"submit\" className=\"button\">\r\n                        <span>Start Chatting</span>\r\n                    </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>             \r\n                </form>\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\nexport default LoginForm;","import { useState } from 'react';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\n \r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const { chatId, creds } = props;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId, { text });\r\n\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n\r\n        isTyping(props, chatId);\r\n\r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, { fles: event.target.files, text: ''})\r\n    }\r\n\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input\r\n            className=\"message-input\"\r\n            placeholder=\"Send a message...\"\r\n            value={value}\r\n            onChange={handleChange}\r\n            onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    <PictureOutlined className=\"picture-icon\" />\r\n                    </span> \r\n            </label>\r\n            <input\r\n            type=\"file\"\r\n            multiple={false}\r\n            id=\"upload-button\"\r\n            style={{ display: 'none' }}\r\n            onChange={handleUpload}\r\n            />\r\n            <button tpe=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\" />\r\n            </button>\r\n            </form>\r\n        );\r\n}\r\nexport default MessageForm;","const MyMessage = ({ message }) => {\r\n    if(message?.attachments?.length > 0){\r\n        return (\r\n            <img\r\n            src={message.attachments[0].file}\r\n            alt=\"message-attachment\"\r\n            className=\"message-image\"\r\n            style={{  float: 'right'}}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50'}}>\r\n            {message.text}\r\n        </div>\r\n    );\r\n}\r\nexport default MyMessage;","const TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = ! lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    return (\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div\r\n                className=\"message-avatar\"\r\n                style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n                />\r\n            )}\r\n            {(message?.attachments?.length > 0)\r\n            ? (\r\n                 <img\r\n                    src={message.attachments[0].file}\r\n                    alt=\"message-attachment\"\r\n                    className=\"message-image\"\r\n                    style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px'}}\r\n                    />\r\n               ) : (\r\n                <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\r\n                    {message.text}\r\n                </div>\r\n               ) \r\n            }\r\n            \r\n        </div>\r\n    );\r\n}\r\nexport default TheirMessage ;","import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n        chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div\r\n            key={`read_${index}`}\r\n            className=\"read-receipt\"\r\n            style={{\r\n                float: isMyMessage ? 'right' : 'left',\r\n                backgroundImage: `url(${person?.person?.avatar})`\r\n            }}\r\n            />\r\n        ))\r\n    }\r\n    \r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages) ;\r\n\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index ===0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.userName;\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{ width: '100%'}}>\r\n                  <div className=\"message-block\">\r\n                      {\r\n                          isMyMessage\r\n                          ? <MyMessage message={message}/>\r\n                          : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                      }\r\n                      </div> \r\n                      <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px'}}> \r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                      </div> \r\n                </div>\r\n            );\r\n        })\r\n    }\r\n    renderMessages()\r\n\r\n    if(!chat) return 'Loading... ';\r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat.title}</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person) => ` ${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()};\r\n            <div style={{ height: '100px'}} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm {...props} chatId={activeChat} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n    }\r\n\r\nexport default ChatFeed;","import React from 'react';\r\nimport { ChatEngine } from 'react-chat-engine';\r\nimport LoginForm from './components/LoginForm';\r\n\r\nimport './App.css';\r\nimport ChatFeed from './components/ChatFeed';\r\n\r\n\r\nconst App = () => {\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n\r\n\treturn (\r\n\t\t<ChatEngine\r\n\t\t\theight='100vh'\r\n\t\t\tuserName={localStorage.getItem('username')}\r\n\t\t\tuserSecret={localStorage.getItem('password')}\r\n\t\t\tprojectID='6b644aa0-ddcf-4c97-8822-845ce8f2de45'\r\n            renderChatFeed={(chatAppProps) => <ChatFeed { ... chatAppProps } />} \r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}